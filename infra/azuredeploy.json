{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "gatewayVersion": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Version of the DeviceScript Gateway package"
            }
        },
        "namePrefix": {
            "type": "string",
            "minLength": 3,
            "maxLength": 11,
            "metadata": {
                "description": "Name prefix for created resources."
            }
        },
        "adminUserId": {
            "type": "string",
            "metadata": {
                "description": "User id owning the key vault (use `az ad signed-in-user show`)."
            }
        },
        "adminPassword": {
            "type": "securestring",
            "minLength": 32,
            "maxLength": 256,
            "metadata": {
                "description": "Password for the administrator user (use `openssl rand -base64 32`)."
            }
        }
    },
    "functions": [],
    "variables": {
        "prefix": "[toLower(parameters('namePrefix'))]",
        "blobServicesName": "default",
        "location": "[resourceGroup().location]",
        "serverfarmsApiVersion": "2015-08-01",
        "storageApiVersion": "2022-09-01",
        "appInsightsApiVersion": "2020-02-02",
        "webAppApiVersion": "2022-03-01",
        "keyVaultApiVersion": "2022-07-01",
        "eventHubApiVersion": "2022-01-01-preview",
        "sku": "Free",
        "skuCode": "F1",
        "workerSize": "0",
        "workerSizeId": "0",
        "numberOfWorkers": "1",
        "webAppAlwaysOn": false,
        "webAppLinuxFxVersion": "NODE|18-lts",
        "eventHubSku": "Basic",
        "eventHubPartitionCount": 1,
        "eventHubMessageRetentionInDays": 1,
        "tenantId": "[subscription().tenantId]",
        "hostingPlanName": "[concat(variables('prefix'), 'hosting')]",
        "webAppName": "[concat(variables('prefix'), 'webapp')]",
        "appInsightsName": "[concat(variables('prefix'), 'appinsights')]",
        "storageAccountName": "[concat(variables('prefix'), 'storage')]",
        "keyVaultName": "[concat(variables('prefix'), 'keys')]",
        "eventHubNamespaceName": "[concat(variables('prefix'), 'ns')]",
        "eventHubAuthorizationRuleName": "gateway",
        "telemetryEventHubName": "telemetry",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "keyVaultId": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "storageAccountId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "appInsightsId": "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
        "webAppId": "[resourceId('Microsoft.Web/sites', variables('webAppName'))]",
        "eventHubNamespaceId": "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNamespaceName'))]",
        "telemetryEventHubId": "[resourceId('Microsoft.EventHub/namespaces/eventhubs', variables('eventHubNamespaceName'), variables('telemetryEventHubName'))]",
        "eventHubAuthorizationRuleId": "[resourceId('Microsoft.EventHub/namespaces/authorizationRules', variables('eventHubNamespaceName'), variables('eventHubAuthorizationRuleName'))]",
        "storageConnectionStringSecretName": "storageAccountConnectionString",
        "eventHubConnectionStringSecretName": "eventHubAccountConnectionString",
        "adminToken": "[concat('admin:', parameters('adminPassword'))]",
        "passwordsSecretName": "passwords",
        "adminConnectionStringSecretName": "adminConnectionString"
    },
    "resources": [
        //event hub
        {
            "type": "Microsoft.EventHub/namespaces",
            "apiVersion": "[variables('eventHubApiVersion')]",
            "name": "[variables('eventHubNamespaceName')]",
            "location": "[variables('location')]",
            "sku": {
                "name": "[variables('eventHubSku')]",
                "tier": "[variables('eventHubSku')]",
                "capacity": 1
            },
            "properties": {
                "isAutoInflateEnabled": false,
                "maximumThroughputUnits": 0
            }
        },
        {
            "type": "Microsoft.EventHub/namespaces/authorizationRules",
            "apiVersion": "[variables('eventHubApiVersion')]",
            "name": "[concat(variables('eventHubNamespaceName'), '/', variables('eventHubAuthorizationRuleName'))]",
            "properties": {
                "rights": ["Send"]
            },
            "dependsOn": ["[variables('eventHubNamespaceId')]"]
        },
        {
            "type": "Microsoft.EventHub/namespaces/eventhubs",
            "apiVersion": "[variables('eventHubApiVersion')]",
            "name": "[concat(variables('eventHubNamespaceName'), '/', variables('telemetryEventHubName'))]",
            "properties": {
                "messageRetentionInDays": "[variables('eventHubMessageRetentionInDays')]",
                "partitionCount": "[variables('eventHubPartitionCount')]"
            },
            "dependsOn": ["[variables('eventHubNamespaceId')]"]
        },
        // storage
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "[variables('storageApiVersion')]",
            "name": "[variables('storageAccountName')]",
            "location": "[variables('location')]",
            "dependsOn": [],
            "sku": {
                "name": "Standard_RAGRS"
            },
            "kind": "StorageV2",
            "properties": {
                "serverFarmId": "[variables('serverFarmId')]",
                "supportsHttpsTrafficOnly": true,
                "isHnsEnabled": true
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices",
            "apiVersion": "[variables('storageApiVersion')]",
            "name": "[concat(variables('storageAccountName'), '/', variables('blobServicesName'))]",
            "dependsOn": ["[variables('storageAccountId')]"],
            "properties": {
                "cors": {
                    "corsRules": []
                },
                "deleteRetentionPolicy": {
                    "enabled": false
                }
            }
        },
        // app insights
        {
            "type": "Microsoft.Insights/components",
            "apiVersion": "[variables('appInsightsApiVersion')]",
            "name": "[variables('appInsightsName')]",
            "location": "[variables('location')]",
            "kind": "web",
            "properties": {
                "applicationId": "[variables('webAppName')]",
                "application_Type": "web"
            }
        },
        // keys
        {
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "[variables('keyVaultApiVersion')]",
            "name": "[variables('keyVaultName')]",
            "location": "[variables('location')]",
            "dependsOn": ["[variables('webAppId')]"],
            "properties": {
                "enableSoftDelete": false,
                "enabledForDeployment": false,
                "enabledForDiskEncryption": false,
                "enabledForTemplateDeployment": false,
                "enableRbacAuthorization": false,
                "tenantId": "[variables('tenantId')]",
                "accessPolicies": [
                    {
                        // current user has full rights
                        "tenantId": "[variables('tenantId')]",
                        "objectId": "[parameters('adminUserId')]",
                        "permissions": {
                            "secrets": ["all"]
                        }
                    },
                    {
                        // web site can read
                        "tenantId": "[variables('tenantId')]",
                        "objectId": "[reference(variables('webAppId'), variables('webAppApiVersion'), 'Full').identity.principalId]",
                        "permissions": {
                            "secrets": ["get"]
                        }
                    }
                ],
                "sku": {
                    "name": "Standard",
                    "family": "A"
                },
                "networkAcls": {
                    "defaultAction": "Allow",
                    "bypass": "AzureServices"
                }
            }
        },
        // secrets
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "[variables('keyVaultApiVersion')]",
            "name": "[concat(variables('keyVaultName'), '/', variables('passwordsSecretName'))]",
            "dependsOn": [
                "[variables('keyVaultId')]",
                "[variables('storageAccountId')]"
            ],
            "properties": {
                "value": "[variables('adminToken')]"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "[variables('keyVaultApiVersion')]",
            "name": "[concat(variables('keyVaultName'), '/', variables('adminConnectionStringSecretName'))]",
            "dependsOn": ["[variables('keyVaultId')]"],
            "properties": {
                "value": "[concat('WebAppName=', variables('webAppName') ,';AccountName=admin;AccountKey=', parameters('adminPassword'), ';EndPointSuffix=azurewebsites.net')]"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "[variables('keyVaultApiVersion')]",
            "name": "[concat(variables('keyVaultName'), '/', variables('storageConnectionStringSecretName'))]",
            "dependsOn": [
                "[variables('keyVaultId')]",
                "[variables('storageAccountId')]"
            ],
            "properties": {
                "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), variables('storageApiVersion')).keys[0].value,';EndpointSuffix=core.windows.net')]"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "[variables('keyVaultApiVersion')]",
            "name": "[concat(variables('keyVaultName'), '/', variables('eventHubConnectionStringSecretName'))]",
            "dependsOn": [
                "[variables('keyVaultId')]",
                "[variables('eventHubAuthorizationRuleId')]"
            ],
            "properties": {
                "value": "[listKeys(variables('eventHubAuthorizationRuleId'), variables('eventHubApiVersion')).keys[0].primaryConnectionString]"
            }
        },
        // web
        {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "[variables('serverfarmsApiVersion')]",
            "name": "[variables('hostingPlanName')]",
            "location": "[variables('location')]",
            "tags": {
                "displayName": "HostingPlan"
            },
            "kind": "linux",
            "sku": {
                "Tier": "[variables('sku')]",
                "Name": "[variables('skuCode')]"
            },
            "properties": {
                "reserved": true,
                "name": "[variables('hostingPlanName')]",
                "workerSize": "[variables('workerSize')]",
                "workerSizeId": "[variables('workerSizeId')]",
                "numberOfWorkers": "[variables('numberOfWorkers')]"
            }
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "[variables('webAppApiVersion')]",
            "name": "[variables('webAppName')]",
            "location": "[variables('location')]",
            "tags": {
                "displayName": "[variables('webAppName')]",
                "deviceScriptGateway": "[parameters('gatewayVersion')]"
            },
            "dependsOn": [
                "[variables('serverFarmId')]",
                "[variables('appInsightsId')]",
                "[variables('eventHubAuthorizationRuleId')]",
                "[variables('telemetryEventHubId')]"
            ],
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "name": "[variables('webAppName')]",
                "httpsOnly": true,
                "serverFarmId": "[variables('serverFarmId')]",
                "clientAffinityEnabled": false,
                "siteConfig": {
                    "linuxFxVersion": "[variables('webAppLinuxFxVersion')]",
                    "alwaysOn": "[variables('webAppAlwaysOn')]",
                    "appSettings": [
                        {
                            "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                            "value": "[reference(variables('appInsightsName'), variables('appInsightsApiVersion')).InstrumentationKey]"
                        },
                        {
                            "name": "DEVS_KEY_VAULT_NAME",
                            "value": "[variables('keyVaultName')]"
                        },
                        {
                            "name": "DEVS_STORAGE_CONNECTION_STRING_SECRET",
                            "value": "[variables('storageConnectionStringSecretName')]"
                        },
                        {
                            "name": "DEVS_EVENT_HUB_CONNECTION_STRING_SECRET",
                            "value": "[variables('eventHubConnectionStringSecretName')]"
                        },
                        {
                            "name": "DEVS_PASSWORDS_SECRET",
                            "value": "[variables('passwordsSecretName')]"
                        }
                    ]
                }
            }
        }
    ],
    "outputs": {
        "keyVaultName": {
            "type": "string",
            "value": "[variables('keyVaultName')]"
        },
        "webAppName": {
            "type": "string",
            "value": "[variables('webAppName')]"
        }
    }
}
